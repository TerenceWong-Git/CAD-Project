name: cas-deploy

on:
  push:
    branches:
      - "production"
  workflow_dispatch:

env:
  DOCKER_REPO_NAME: wyukman1020/docker
  SERVER_USER: ubuntu
  SERVER_DIR: /home/ubuntu/
  BUCKET_NAME: cas-react-development
  CLOUDFRONT_DISTRIBUTION: E10KX1B5YIW1RZ
  AWS_DEFAULT_REGION: ap-southeast-1

jobs:
  test-and-build-backend:
    runs-on: ubuntu-latest
    container: node:latest
    # services:
    #   db:
    #     image: postgres:latest
    #     env:
    #       POSTGRES_DB: ${{env.POSTGRES_DB}}
    #       POSTGRES_USER: ${{env.POSTGRES_USER}}
    #       POSTGRES_PASSWORD: ${{env.POSTGRES_PASSWORD}}
    #     ports:
    #       - 5432:5432
    # env:
    #   PORT: 80
    #   DB_HOST: db
    #   DB_PORT: 5432
    steps:
      - uses: actions/checkout@v3
      - name: Install yarn deps
        working-directory: backend
        run: |
          yarn
      - name: Migrate database with prisma
        working-directory: backend
        run: |
          yarn prisma generate && yarn migrate:dev && yarn seed:prod
      - name: Build project
        working-directory: backend
        run: |
          yarn build
      - name: Run testing
        working-directory: backend
        run: |
          yarn start:prod
      - name: archive built files
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: backend/dist

  deploy-server-to-docker:
    needs: test-and-build-backend
    runs-on: ubuntu-latest
    container: docker:latest
    steps:
      - uses: actions/checkout@v3
      - name: restore built files backend
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: backend/dist
      - name: Build docker image for backend
        working-directory: backend
        run: |
          docker build -t cas-server .
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Do Docker tag and push
        working-directory: backend
        run: |
          docker tag cas-server:latest ${{ env.DOCKER_REPO_NAME }}
          docker push ${{ env.DOCKER_REPO_NAME }}

  ssh-ec2-and-compose-up:
    needs: deploy-server-to-docker
    runs-on: ubuntu-latest
    steps:
      - name: Executing remote ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          username: ${{ env.SERVER_USER }}
          script: |
            cd ${{ env.SERVER_DIR }}
            sudo usermod -aG docker ${{ env.SERVER_USER }}
            sudo service docker restart
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            sudo docker pull ${{ env.DOCKER_REPO_NAME }}
            sudo docker tag ${{ env.DOCKER_REPO_NAME }} cas-server:latest
            sudo docker compose up -d && sudo docker ps

  test-and-build-react:
    runs-on: ubuntu-latest
    container: node:lts-alpine
    steps:
      - uses: actions/checkout@v3
      - name: Install yarn deps
        working-directory: frontend
        run: yarn
      # - name: run testing
      #   working-directory: frontend
      #   run: yarn run test
      - name: Build frontend project
        working-directory: frontend
        env:
          REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.REACT_APP_GOOGLE_MAPS_API_KEY }}
          REACT_APP_BACKEND_URL: https://backend.wikipetia.me
        run: yarn run build
      - name: Archive react built files
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: frontend/build

  deploy-react-to-aws:
    needs:
      - test-and-build-react
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Restore frontend files
        uses: actions/download-artifact@v3
        with:
          name: build
          path: frontend/build
      - name: Check built files in server
        working-directory: frontend
        run: |
          ls build/index.html
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      - run: pip install -r requirements.txt
      - name: Deploy to s3 and cloudfront
        working-directory: frontend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        run: |
          aws s3 sync ./build s3://${{env.BUCKET_NAME}} --delete

# aws cloudfront create-invalidation --distribution-id ${{env.CLOUDFRONT_DISTRIBUTION}} --paths "/*"

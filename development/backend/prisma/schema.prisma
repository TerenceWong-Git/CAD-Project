// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  username    String    @unique
  password    String
  phoneNumber Int       @unique @map("phone_number")
  gender      Gender
  district    District
  yearBirth   Int?      @map("year_birth")
  monthBirth  Int?      @map("month_birth")
  IsWriter    Boolean   @default(false) @map("is_writer")
  Pet         Pet[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  Comment     Comment[]
  Event       Event[]
  Exp         Exp[]
  ExpLike     ExpLike[]

  @@map("users")
}

model MapType {
  id      Int    @id @default(autoincrement())
  chiType String @map("chinese_type") @db.VarChar(255)
  engType String @map("english_type") @db.VarChar(255)
  map     Maps[]

  @@unique([chiType, engType])
  @@map("map_type")
}

model Maps {
  id               Int                @id @default(autoincrement())
  mapType          MapType            @relation(fields: [mapTypeId], references: [id])
  mapTypeId        Int                @map("map_type_id")
  chiName          String             @map("chinese_name")
  engName          String             @map("english_name")
  email            String?
  phoneNumber      Int?               @map("phone_number")
  chiAddress       String             @unique @map("chinese_address")
  engAddress       String             @unique @map("english_address")
  district         District
  latitude         Decimal            @db.Decimal(11, 8)
  longitude        Decimal            @db.Decimal(11, 8)
  profileImg       String?            @unique @map("profile_img")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")
  Comment          Comment[]
  Exp              Exp[]
  MapToWorkingHour MapToWorkingHour[]

  @@unique([latitude, longitude])
  @@map("maps")
}

model WorkingHour {
  id               Int                @id @default(autoincrement())
  weekday          Weekday
  hours            String
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")
  MapToWorkingHour MapToWorkingHour[]

  @@map("working_hours")
}

model MapToWorkingHour {
  id            Int         @id @default(autoincrement())
  map           Maps        @relation(fields: [mapId], references: [id])
  mapId         Int         @map("map_id")
  workingHour   WorkingHour @relation(fields: [workingHourId], references: [id])
  workingHourId Int         @map("working_hour_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")

  @@unique([mapId, workingHourId])
  @@map("map_to_working_hours")
}

model Species {
  id         Int       @id @default(autoincrement())
  familyId   Int?      @map("family_id")
  family     Species?  @relation("FamilyGenus", fields: [familyId], references: [id])
  genus      Species[] @relation("FamilyGenus")
  chiSpecies String    @map("chinese_species")
  engSpecies String    @map("english_species")
  Pet        Pet[]

  @@unique([chiSpecies, engSpecies])
  @@map("species")
}

model Pet {
  id         Int          @id @default(autoincrement())
  user       User         @relation(fields: [userId], references: [id])
  userId     Int          @map("user_id")
  name       String
  species    Species      @relation(fields: [speciesId], references: [id])
  speciesId  Int          @map("species_id")
  gender     Gender?
  profileImg String?      @unique @map("profile_img")
  dateBirth  DateTime?    @map("date_birth") @db.Date()
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @default(now()) @updatedAt @map("updated_at")
  PetWeight  PetWeight[]
  PetImg     PetImg[]
  PetVaccine PetVaccine[]

  @@unique([userId, name])
  @@map("pets")
}

model PetWeight {
  id        Int      @id @default(autoincrement())
  pet       Pet      @relation(fields: [petId], references: [id])
  petId     Int      @map("pet_id")
  weight    Decimal  @db.Decimal(6, 2)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("pets_weight")
}

model PetImg {
  id         Int       @id @default(autoincrement())
  pet        Pet       @relation(fields: [petId], references: [id])
  petId      Int       @map("pet_id")
  tag        String?
  name       String    @unique
  isPrivate  Boolean   @map("is_private")
  modifiedAt DateTime? @map("modified_at")
  createdAt  DateTime  @default(now()) @map("created_at")

  @@map("pets_img")
}

model PetVaccine {
  id        Int      @id @default(autoincrement())
  pet       Pet      @relation(fields: [petId], references: [id])
  petId     Int      @map("pet_id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("pets_vaccine")
}

model Comment {
  id         Int          @id @default(autoincrement())
  user       User         @relation(fields: [userId], references: [id])
  userId     Int          @map("user_id")
  map        Maps         @relation(fields: [mapId], references: [id])
  mapId      Int          @map("map_id")
  title      String       @db.VarChar(255)
  content    String
  isThumb    Boolean      @map("is_thumb")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @default(now()) @updatedAt @map("updated_at")
  CommentImg CommentImg[]

  @@map("comments")
}

model CommentImg {
  id        Int     @id @default(autoincrement())
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int     @map("comment_id")
  name      String  @db.VarChar(255)
  isDeleted Boolean @map("is_deleted")

  @@map("comments_img")
}

model Event {
  id         Int        @id @default(autoincrement())
  host       User       @relation(fields: [hostId], references: [id])
  hostId     Int        @map("host_id")
  location   String     @db.VarChar(255)
  district   District
  tag        String?
  animalType AnimalType @map("animal_type")
  title      String     @db.VarChar(255)
  content    String
  date       DateTime   @db.Date
  time       DateTime   @db.Time(6)
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")

  @@unique([hostId, date, time])
  @@map("events")
}

model Exp {
  id        Int       @id @default(autoincrement())
  poster    User      @relation(fields: [posterId], references: [id])
  posterId  Int       @map("poster_id")
  title     String    @db.VarChar(255)
  tag       String?
  content   String
  map       Maps?     @relation(fields: [mapId], references: [id])
  mapId     Int?      @map("map_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  ExpLike   ExpLike[]

  @@map("experience")
}

model ExpLike {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @map("user_id")
  exp         Exp       @relation(fields: [expId], references: [id])
  expId       Int       @map("exp_id")
  thumbStatus ThumbStat @map("thumb_status")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  @@unique([userId, expId])
  @@map("experience_like")
}

enum Gender {
  Male
  Female
}

enum District {
  Islands
  Kwai_Tsing
  North
  Sai_Kung
  Sha_Tin
  Tai_Po
  Tsuen_Wan
  Tuen_Mun
  Yuen_Long
  Kowloon_City
  Kwun_Tong
  Sham_Shui_Po
  Wong_Tai_Sin
  Yau_Tsim_Mong
  Central_and_Western
  Eastern
  Southern
  Wan_Chai
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum AnimalType {
  Cat
  Dog
  Others
}

enum ThumbStat {
  Up
  Down
  Removed
}
